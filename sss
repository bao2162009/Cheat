-- Enhanced UI Library with Third Group Box Support
local cloneref = (cloneref or clonereference or function(instance: any)
    return instance
end)

local CoreGui: CoreGui = cloneref(game:GetService("CoreGui"))
local Players: Players = cloneref(game:GetService("Players"))
local RunService: RunService = cloneref(game:GetService("RunService"))
local SoundService: SoundService = cloneref(game:GetService("SoundService"))
local UserInputService: UserInputService = cloneref(game:GetService("UserInputService"))
local TextService: TextService = cloneref(game:GetService("TextService"))
local Teams: Teams = cloneref(game:GetService("Teams"))
local TweenService: TweenService = cloneref(game:GetService("TweenService"))

local getgenv = getgenv or function()
    return shared
end

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
local Mouse = LocalPlayer:GetMouse()

-- Enhanced Library with Three Group Box Support
local Library = {
    LocalPlayer = LocalPlayer,
    DevicePlatform = nil,
    IsMobile = false,
    IsRobloxFocused = true,
    
    ScreenGui = nil,
    
    SearchText = "",
    Searching = false,
    LastSearchTab = nil,
    
    ActiveTab = nil,
    Tabs = {},
    DependencyBoxes = {},
    
    KeybindFrame = nil,
    KeybindContainer = nil,
    KeybindToggles = {},
    
    Notifications = {},
    
    ToggleKeybind = Enum.KeyCode.RightControl,
    TweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    NotifyTweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    
    Toggled = false,
    Unloaded = false,
    
    Labels = {},
    Buttons = {},
    Toggles = {},
    Options = {},
    
    NotifySide = "Right",
    ShowCustomCursor = true,
    ForceCheckbox = false,
    ShowToggleFrameInKeybinds = true,
    NotifyOnError = false,
    
    CantDragForced = false,
    
    Signals = {},
    UnloadSignals = {},
    
    MinSize = Vector2.new(720, 360), -- Increased minimum width for third column
    DPIScale = 1,
    CornerRadius = 4,
    
    IsLightTheme = false,
    Scheme = {
        BackgroundColor = Color3.fromRGB(15, 15, 15),
        MainColor = Color3.fromRGB(25, 25, 25),
        AccentColor = Color3.fromRGB(125, 85, 255),
        OutlineColor = Color3.fromRGB(40, 40, 40),
        FontColor = Color3.new(1, 1, 1),
        Font = Font.fromEnum(Enum.Font.Code),
        
        Red = Color3.fromRGB(255, 50, 50),
        Dark = Color3.new(0, 0, 0),
        White = Color3.new(1, 1, 1),
    },
    
    Registry = {},
    DPIRegistry = {},
}

-- Enhanced Templates for Three Column Layout
local Templates = {
    Window = {
        Title = "Enhanced UI Library",
        Footer = "Three Column Layout",
        Position = UDim2.fromOffset(6, 6),
        Size = UDim2.fromOffset(960, 600), -- Increased width for third column
        IconSize = UDim2.fromOffset(30, 30),
        AutoShow = true,
        Center = true,
        Resizable = true,
        CornerRadius = 4,
        NotifySide = "Right",
        ShowCustomCursor = true,
        Font = Enum.Font.Code,
        ToggleKeybind = Enum.KeyCode.RightControl,
        MobileButtonsSide = "Left",
    },
    Toggle = {
        Text = "Toggle",
        Default = false,
        Callback = function() end,
        Changed = function() end,
        Risky = false,
        Disabled = false,
        Visible = true,
    },
    Input = {
        Text = "Input",
        Default = "",
        Finished = false,
        Numeric = false,
        ClearTextOnFocus = true,
        Placeholder = "",
        AllowEmpty = true,
        EmptyReset = "---",
        Callback = function() end,
        Changed = function() end,
        Disabled = false,
        Visible = true,
    },
    Slider = {
        Text = "Slider",
        Default = 0,
        Min = 0,
        Max = 100,
        Rounding = 0,
        Prefix = "",
        Suffix = "",
        Callback = function() end,
        Changed = function() end,
        Disabled = false,
        Visible = true,
    },
    Dropdown = {
        Values = {},
        DisabledValues = {},
        Multi = false,
        MaxVisibleDropdownItems = 8,
        Callback = function() end,
        Changed = function() end,
        Disabled = false,
        Visible = true,
    },
}

-- Enhanced UI Creation Functions
local function New(ClassName: string, Properties: { [string]: any }): any
    local Instance = Instance.new(ClassName)
    
    for Property, Value in pairs(Properties) do
        if Property == "Parent" then
            continue
        end
        
        if typeof(Value) == "string" and Library.Scheme[Value] then
            Instance[Property] = Library.Scheme[Value]
            Library.Registry[Instance] = Library.Registry[Instance] or {}
            Library.Registry[Instance][Property] = Value
        else
            Instance[Property] = Value
        end
    end
    
    if Properties.Parent then
        Instance.Parent = Properties.Parent
    end
    
    return Instance
end

-- Enhanced Window Creation with Three Column Support
function Library:CreateWindow(WindowInfo)
    WindowInfo = WindowInfo or {}
    for Key, Value in pairs(Templates.Window) do
        if WindowInfo[Key] == nil then
            WindowInfo[Key] = Value
        end
    end
    
    local ViewportSize = workspace.CurrentCamera.ViewportSize
    local MaxX = ViewportSize.X - 64
    local MaxY = ViewportSize.Y - 64
    
    Library.MinSize = Vector2.new(math.min(Library.MinSize.X, MaxX), math.min(Library.MinSize.Y, MaxY))
    WindowInfo.Size = UDim2.fromOffset(
        math.clamp(WindowInfo.Size.X.Offset, Library.MinSize.X, MaxX),
        math.clamp(WindowInfo.Size.Y.Offset, Library.MinSize.Y, MaxY)
    )
    
    -- Create ScreenGui
    local ScreenGui = New("ScreenGui", {
        Name = "EnhancedUI",
        DisplayOrder = 999,
        ResetOnSpawn = false,
        Parent = CoreGui
    })
    Library.ScreenGui = ScreenGui
    
    -- Create Main Frame
    local MainFrame = New("Frame", {
        BackgroundColor3 = "BackgroundColor",
        Name = "Main",
        Position = WindowInfo.Position,
        Size = WindowInfo.Size,
        Visible = false,
        Parent = ScreenGui,
    })
    
    New("UICorner", {
        CornerRadius = UDim.new(0, WindowInfo.CornerRadius),
        Parent = MainFrame,
    })
    
    -- Create Top Bar
    local TopBar = New("Frame", {
        BackgroundColor3 = "MainColor",
        Size = UDim2.new(1, 0, 0, 48),
        Parent = MainFrame,
    })
    
    New("UICorner", {
        CornerRadius = UDim.new(0, WindowInfo.CornerRadius),
        Parent = TopBar,
    })
    
    -- Title
    local Title = New("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(12, 0),
        Size = UDim2.new(0.3, -12, 1, 0),
        Text = WindowInfo.Title,
        TextColor3 = "FontColor",
        TextSize = 20,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TopBar,
    })
    
    -- Search Box
    local SearchBox = New("TextBox", {
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = "MainColor",
        PlaceholderText = "Search components...",
        Position = UDim2.new(0.3, 8, 0.5, 0),
        Size = UDim2.new(0.7, -57, 1, -16),
        Text = "",
        TextColor3 = "FontColor",
        TextScaled = true,
        Parent = TopBar,
    })
    
    New("UICorner", {
        CornerRadius = UDim.new(0, WindowInfo.CornerRadius),
        Parent = SearchBox,
    })
    
    New("UIStroke", {
        Color = "OutlineColor",
        Parent = SearchBox,
    })
    
    -- Create Three Column Container
    local Container = New("Frame", {
        BackgroundColor3 = "BackgroundColor",
        Position = UDim2.fromOffset(0, 49),
        Size = UDim2.new(1, 0, 1, -70),
        Parent = MainFrame,
    })
    
    -- Column Layout with Three Sections
    local ColumnLayout = New("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        Padding = UDim.new(0, 6),
        Parent = Container,
    })
    
    -- Create Three Columns
    local LeftColumn = New("ScrollingFrame", {
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 1,
        CanvasSize = UDim2.fromScale(0, 0),
        ScrollBarThickness = 2,
        Size = UDim2.new(0.33, -4, 1, 0),
        Parent = Container,
    })
    
    local MiddleColumn = New("ScrollingFrame", {
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 1,
        CanvasSize = UDim2.fromScale(0, 0),
        ScrollBarThickness = 2,
        Size = UDim2.new(0.33, -4, 1, 0),
        Parent = Container,
    })
    
    local RightColumn = New("ScrollingFrame", {
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 1,
        CanvasSize = UDim2.fromScale(0, 0),
        ScrollBarThickness = 2,
        Size = UDim2.new(0.33, -4, 1, 0),
        Parent = Container,
    })
    
    -- Add layouts to columns
    for _, Column in pairs({LeftColumn, MiddleColumn, RightColumn}) do
        New("UIListLayout", {
            Padding = UDim.new(0, 6),
            Parent = Column,
        })
        
        New("UIPadding", {
            PaddingBottom = UDim.new(0, 6),
            PaddingLeft = UDim.new(0, 6),
            PaddingRight = UDim.new(0, 6),
            PaddingTop = UDim.new(0, 6),
            Parent = Column,
        })
    end
    
    -- Bottom Bar
    local BottomBar = New("Frame", {
        AnchorPoint = Vector2.new(0, 1),
        BackgroundColor3 = "MainColor",
        Position = UDim2.fromScale(0, 1),
        Size = UDim2.new(1, 0, 0, 20),
        Parent = MainFrame,
    })
    
    New("UICorner", {
        CornerRadius = UDim.new(0, WindowInfo.CornerRadius),
        Parent = BottomBar,
    })
    
    local Footer = New("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.fromScale(1, 1),
        Text = WindowInfo.Footer,
        TextColor3 = "FontColor",
        TextSize = 14,
        TextTransparency = 0.5,
        Parent = BottomBar,
    })
    
    -- Window Object
    local Window = {
        MainFrame = MainFrame,
        LeftColumn = LeftColumn,
        MiddleColumn = MiddleColumn,
        RightColumn = RightColumn,
        SearchBox = SearchBox,
    }
    
    -- Enhanced Group Box Creation
    function Window:AddGroupBox(Column, Title, IconName)
        local TargetColumn
        if Column == 1 or Column == "Left" then
            TargetColumn = LeftColumn
        elseif Column == 2 or Column == "Middle" then
            TargetColumn = MiddleColumn
        elseif Column == 3 or Column == "Right" then
            TargetColumn = RightColumn
        else
            error("Invalid column specified. Use 1/Left, 2/Middle, or 3/Right")
        end
        
        local GroupBox = New("Frame", {
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundColor3 = "MainColor",
            Size = UDim2.new(1, 0, 0, 0),
            Parent = TargetColumn,
        })
        
        New("UICorner", {
            CornerRadius = UDim.new(0, Library.CornerRadius),
            Parent = GroupBox,
        })
        
        New("UIStroke", {
            Color = "OutlineColor",
            Parent = GroupBox,
        })
        
        -- Group Box Header
        local Header = New("Frame", {
            BackgroundColor3 = "AccentColor",
            Size = UDim2.new(1, 0, 0, 32),
            Parent = GroupBox,
        })
        
        New("UICorner", {
            CornerRadius = UDim.new(0, Library.CornerRadius),
            Parent = Header,
        })
        
        local HeaderTitle = New("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.fromOffset(12, 0),
            Size = UDim2.new(1, -12, 1, 0),
            Text = Title or "Group Box",
            TextColor3 = "FontColor",
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = Header,
        })
        
        -- Content Container
        local Content = New("Frame", {
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundTransparency = 1,
            Position = UDim2.fromOffset(0, 32),
            Size = UDim2.new(1, 0, 0, 0),
            Parent = GroupBox,
        })
        
        New("UIListLayout", {
            Padding = UDim.new(0, 4),
            Parent = Content,
        })
        
        New("UIPadding", {
            PaddingBottom = UDim.new(0, 8),
            PaddingLeft = UDim.new(0, 8),
            PaddingRight = UDim.new(0, 8),
            PaddingTop = UDim.new(0, 8),
            Parent = Content,
        })
        
        -- Group Box Object
        local GroupBoxObj = {
            Frame = GroupBox,
            Content = Content,
            Header = Header,
            Title = HeaderTitle,
        }
        
        -- Add Toggle
        function GroupBoxObj:AddToggle(Text, Default, Callback)
            local Toggle = New("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 24),
                Parent = Content,
            })
            
            local ToggleButton = New("TextButton", {
                BackgroundColor3 = "MainColor",
                Size = UDim2.fromOffset(20, 20),
                Text = "",
                Parent = Toggle,
            })
            
            New("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ToggleButton,
            })
            
            New("UIStroke", {
                Color = "OutlineColor",
                Parent = ToggleButton,
            })
            
            local CheckMark = New("TextLabel", {
                BackgroundTransparency = 1,
                Size = UDim2.fromScale(1, 1),
                Text = "✓",
                TextColor3 = "AccentColor",
                TextScaled = true,
                Visible = Default or false,
                Parent = ToggleButton,
            })
            
            local Label = New("TextLabel", {
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(28, 0),
                Size = UDim2.new(1, -28, 1, 0),
                Text = Text or "Toggle",
                TextColor3 = "FontColor",
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = Toggle,
            })
            
            local State = Default or false
            
            ToggleButton.MouseButton1Click:Connect(function()
                State = not State
                CheckMark.Visible = State
                if Callback then
                    Callback(State)
                end
            end)
            
            return {
                SetValue = function(Value)
                    State = Value
                    CheckMark.Visible = State
                end,
                GetValue = function()
                    return State
                end
            }
        end
        
        -- Add Button
        function GroupBoxObj:AddButton(Text, Callback)
            local Button = New("TextButton", {
                BackgroundColor3 = "MainColor",
                Size = UDim2.new(1, 0, 0, 28),
                Text = Text or "Button",
                TextColor3 = "FontColor",
                TextSize = 14,
                Parent = Content,
            })
            
            New("UICorner", {
                CornerRadius = UDim.new(0, Library.CornerRadius),
                Parent = Button,
            })
            
            New("UIStroke", {
                Color = "OutlineColor",
                Parent = Button,
            })
            
            Button.MouseButton1Click:Connect(function()
                if Callback then
                    Callback()
                end
            end)
            
            return Button
        end
        
        -- Add Slider
        function GroupBoxObj:AddSlider(Text, Min, Max, Default, Callback)
            local SliderFrame = New("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 40),
                Parent = Content,
            })
            
            local Label = New("TextLabel", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 16),
                Text = (Text or "Slider") .. ": " .. (Default or Min),
                TextColor3 = "FontColor",
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = SliderFrame,
            })
            
            local SliderBar = New("Frame", {
                BackgroundColor3 = "MainColor",
                Position = UDim2.fromOffset(0, 20),
                Size = UDim2.new(1, 0, 0, 16),
                Parent = SliderFrame,
            })
            
            New("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = SliderBar,
            })
            
            New("UIStroke", {
                Color = "OutlineColor",
                Parent = SliderBar,
            })
            
            local SliderFill = New("Frame", {
                BackgroundColor3 = "AccentColor",
                Size = UDim2.fromScale((Default or Min) / (Max - Min), 1),
                Parent = SliderBar,
            })
            
            New("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = SliderFill,
            })
            
            local Value = Default or Min
            
            local function UpdateSlider(Input)
                local RelativeX = math.clamp((Input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                Value = Min + (Max - Min) * RelativeX
                Value = math.floor(Value + 0.5) -- Round to nearest integer
                
                SliderFill.Size = UDim2.fromScale(RelativeX, 1)
                Label.Text = (Text or "Slider") .. ": " .. Value
                
                if Callback then
                    Callback(Value)
                end
            end
            
            SliderBar.InputBegan:Connect(function(Input)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    UpdateSlider(Input)
                    
                    local Connection
                    Connection = UserInputService.InputChanged:Connect(function(Input)
                        if Input.UserInputType == Enum.UserInputType.MouseMovement then
                            UpdateSlider(Input)
                        end
                    end)
                    
                    UserInputService.InputEnded:Connect(function(Input)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Connection:Disconnect()
                        end
                    end)
                end
            end)
            
            return {
                SetValue = function(NewValue)
                    Value = math.clamp(NewValue, Min, Max)
                    SliderFill.Size = UDim2.fromScale((Value - Min) / (Max - Min), 1)
                    Label.Text = (Text or "Slider") .. ": " .. Value
                end,
                GetValue = function()
                    return Value
                end
            }
        end
        
        -- Add Input
        function GroupBoxObj:AddInput(Text, Placeholder, Callback)
            local InputFrame = New("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 44),
                Parent = Content,
            })
            
            if Text then
                local Label = New("TextLabel", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 16),
                    Text = Text,
                    TextColor3 = "FontColor",
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = InputFrame,
                })
            end
            
            local TextBox = New("TextBox", {
                BackgroundColor3 = "MainColor",
                Position = UDim2.fromOffset(0, Text and 20 or 0),
                Size = UDim2.new(1, 0, 0, 24),
                PlaceholderText = Placeholder or "Enter text...",
                Text = "",
                TextColor3 = "FontColor",
                TextSize = 14,
                Parent = InputFrame,
            })
            
            New("UICorner", {
                CornerRadius = UDim.new(0, Library.CornerRadius),
                Parent = TextBox,
            })
            
            New("UIStroke", {
                Color = "OutlineColor",
                Parent = TextBox,
            })
            
            New("UIPadding", {
                PaddingLeft = UDim.new(0, 8),
                PaddingRight = UDim.new(0, 8),
                Parent = TextBox,
            })
            
            TextBox.FocusLost:Connect(function()
                if Callback then
                    Callback(TextBox.Text)
                end
            end)
            
            return TextBox
        end
        
        return GroupBoxObj
    end
    
    -- Toggle Window Visibility
    function Window:Toggle()
        Library.Toggled = not Library.Toggled
        MainFrame.Visible = Library.Toggled
    end
    
    -- Show Window
    function Window:Show()
        Library.Toggled = true
        MainFrame.Visible = true
    end
    
    -- Hide Window
    function Window:Hide()
        Library.Toggled = false
        MainFrame.Visible = false
    end
    
    -- Auto-show if specified
    if WindowInfo.AutoShow then
        Window:Show()
    end
    
    -- Center window if specified
    if WindowInfo.Center then
        MainFrame.Position = UDim2.new(0.5, -MainFrame.Size.X.Offset / 2, 0.5, -MainFrame.Size.Y.Offset / 2)
    end
    
    return Window
end

-- Example Usage Function
function Library:CreateExampleUI()
    local Window = self:CreateWindow({
        Title = "Enhanced Three Column UI",
        Footer = "Expanded Layout Demo",
        Size = UDim2.fromOffset(960, 600),
        AutoShow = true,
        Center = true,
    })
    
    -- Left Column - Basic Controls
    local LeftGroup = Window:AddGroupBox(1, "Basic Controls", "settings")
    
    LeftGroup:AddToggle("Enable Feature", false, function(state)
        print("Feature toggled:", state)
    end)
    
    LeftGroup:AddButton("Execute Action", function()
        print("Action executed!")
    end)
    
    LeftGroup:AddSlider("Volume", 0, 100, 50, function(value)
        print("Volume set to:", value)
    end)
    
    LeftGroup:AddInput("Username", "Enter username...", function(text)
        print("Username entered:", text)
    end)
    
    -- Middle Column - Advanced Settings
    local MiddleGroup = Window:AddGroupBox(2, "Advanced Settings", "cog")
    
    MiddleGroup:AddToggle("Auto-Save", true, function(state)
        print("Auto-save:", state)
    end)
    
    MiddleGroup:AddToggle("Dark Mode", true, function(state)
        print("Dark mode:", state)
    end)
    
    MiddleGroup:AddSlider("Opacity", 0, 100, 85, function(value)
        print("Opacity:", value)
    end)
    
    MiddleGroup:AddButton("Reset Settings", function()
        print("Settings reset!")
    end)
    
    -- Right Column - System Information
    local RightGroup = Window:AddGroupBox(3, "System Info", "info")
    
    RightGroup:AddToggle("Show FPS", false, function(state)
        print("Show FPS:", state)
    end)
    
    RightGroup:AddToggle("Debug Mode", false, function(state)
        print("Debug mode:", state)
    end)
    
    RightGroup:AddInput("Server Region", "Auto-detect", function(text)
        print("Server region:", text)
    end)
    
    RightGroup:AddButton("System Diagnostics", function()
        print("Running diagnostics...")
    end)
    
    return Window
end

return Library
